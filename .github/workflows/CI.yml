# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will download a prebuilt Ruby version, install dependencies and run tests with Rake
# For more information see: https://github.com/marketplace/actions/setup-ruby-jruby-and-truffleruby

name: CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - '.gitignore'
      - 'README.md'
      - 'LICENSE'
  pull_request:

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'ruby' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"


  unit-test:
    runs-on: ubuntu-latest
    env:
      VAGRANT_LIBVIRT_REQUIRE_SIMPLECOV: "true"

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
#    - name: Clone ruby-libvirt for ruby > 3.1 support
#      if: ${{ startsWith(matrix.ruby, '3.3.6') }}
#      uses: actions/checkout@v3
#      with:
#        repository: libvirt/libvirt-ruby
#        path: .deps/libvirt-ruby
#        ref: master
    - name: Set up libvirt
      run: |
        sudo apt-get update
        sudo apt-get install libvirt-dev
    - name: Ensure bundle uses https instead of insecure git
      run: |
        git config --global url."https://github.com/".insteadOf git://github.com/
#    - name: Handle additional ruby 3.1 setup
#      if: ${{ startsWith(matrix.ruby, '3.3.6') }}
#      run: |
#        # build gem of latest bindings that contain fix for ruby include path
#        pushd .deps/libvirt-ruby
#        rake gem
#        popd
#
#        mkdir -p vendor/bundle/ruby/3.0.0/cache/
#        cp .deps/libvirt-ruby/pkg/ruby-libvirt-*.gem vendor/bundle/ruby/3.0.0/cache/
#        # need the following to allow the local provided gem to be used instead of the
#        # one from rubygems
#        echo "BUNDLE_DISABLE_CHECKSUM_VALIDATION=true" >> ${GITHUB_ENV}
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        bundler-cache: true
      env:
        # skip installing development group gems to save time
        BUNDLE_WITHOUT: 'development'
        BUNDLE_JOBS: 4
    - name: Run tests
      run: |
        bundle exec parallel_test spec --type rspec
      env:
        BUNDLE_WITHOUT: 'development'
#    - name: Coveralls Parallel
#      uses: coverallsapp/github-action@master
#      with:
#        github-token: ${{ secrets.github_token }}
#        parallel: true
#        path-to-lcov: ./coverage/lcov.info

  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}

    env:
      # skip installing development group gems to save time
      BUNDLE_WITHOUT: 'development'
      BUNDLE_JOBS: 4
      NOKOGIRI_USE_SYSTEM_LIBRARIES: true

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up libvirt for test generation
        run: |
          apt-get update
          apt-get install -y \
            libvirt-dev \
            libz-dev \
          ;
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - name: Generate matrix
        id: generate-matrix
        run: |
          bundle exec rspec --color --format json --fail-fast --dry-run --tag acceptance --out report.json
          tests="$(jq -c '[.examples[].full_description]' report.json)"
          
          echo "matrix=${tests}" >> ${GITHUB_OUTPUT}

  integration-tests:
    needs: generate-matrix

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test_name: ${{ fromJSON(needs.generate-matrix.outputs.matrix) }}

    env:
      # skip installing development group gems to save time
      BUNDLE_WITHOUT: 'development'
      BUNDLE_JOBS: 4
      NOKOGIRI_USE_SYSTEM_LIBRARIES: true

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up libvirt
        run: |
          apt-get update
          apt-get install -y \
            bridge-utils \
            dnsmasq-base \
            ebtables \
            libarchive-tools \
            libguestfs-tools \
            libvirt-clients \
            libvirt-daemon \
            libvirt-daemon-system \
            qemu-kvm \
            qemu-utils \
          ;
          apt-get install -y \
            libvirt-dev \
            libz-dev \
          ;
          
          # start daemon
          systemctl start libvirtd
          
          # add user to group
          usermod -a -G libvirt $USER
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - name: Run tests
        run: |
          mkdir -p $HOME/.vagrant.d/
          # use software emulation due to lack of nested emulation
          cat <<EOF > $HOME/.vagrant.d/Vagrantfile
          Vagrant.configure("2") do |config|
            config.vm.provider :libvirt do |libvirt|
              libvirt.driver = "qemu"
            end
          end
          EOF
          
#          # tell integration tests to use boxes from the cached location
#          # and also to load the above Vagrantfile. This is done because
#          # sg will not inherit env vars, so it's necessary to set them
#          # in a script that sg runs before calling bundle.
#          cat <<EOF > script.bash
#          #!/bin/bash
#          #
#          export VAGRANT_LIBVIRT_VAGRANT_HOME=$HOME/.vagrant.d
#
#          bundle exec rspec --color --fail-fast --tag acceptance -e '${{ matrix.test_name }}'
#          EOF
#          chmod a+x script.bash
#
#          # run script under libvirt group
#          sg libvirt -c ./script.bash

  finish:
    needs: [unit-test, analyze, integration-tests]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
    - name: Check matrix execution status
      run: exit 1
      # see https://stackoverflow.com/a/67532120/4907315
      # and https://github.com/orgs/community/discussions/26822
      if: >-
        ${{
             contains(needs.*.result, 'failure')
          || contains(needs.*.result, 'cancelled')
        }}
#    - name: Coveralls Finished
#      uses: coverallsapp/github-action@master
#      if: contains(needs.*.result, 'skipped') == false
#      with:
#        github-token: ${{ secrets.github_token }}
#        parallel-finished: true
